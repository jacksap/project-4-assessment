{"version":3,"sources":["components/CircleSelector/CircleSelector.jsx","components/Circles/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","react_default","a","createElement","className","concat","circle1selected","onClick","handleClickCircle1","circle2selected","handleClickCircle2","circle3selected","handleClickCircle3","circle4selected","handleClickCircle4","Circles","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","setState","state","components_CircleSelector_CircleSelector","components_Circles_Circles","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b51c15ef.chunk.js","sourcesContent":["import React from 'react';\nimport './CircleSelector.css'\n\nconst CircleSelector = (props) => (\n        <div className='CircleSelector'>\n                <button className={`${props.circle1selected ? 'selected' : null}`} onClick={props.handleClickCircle1}>{`${props.circle1selected ? 'CIRCLE 1 SELECTED': 'SELECT CIRCLE 1'}`}</button>\n                <button className={`${props.circle2selected ? 'selected' : null}`} onClick={props.handleClickCircle2}>{`${props.circle2selected ? 'CIRCLE 2 SELECTED': 'SELECT CIRCLE 2'}`}</button>\n                <button className={`${props.circle3selected ? 'selected' : null}`} onClick={props.handleClickCircle3}>{`${props.circle3selected ? 'CIRCLE 3 SELECTED': 'SELECT CIRCLE 3'}`}</button>\n                <button className={`${props.circle4selected ? 'selected' : null}`} onClick={props.handleClickCircle4}>{`${props.circle4selected ? 'CIRCLE 4 SELECTED': 'SELECT CIRCLE 4'}`}</button>\n        </div>\n);\n\nexport default CircleSelector;","import React from 'react';\nimport './Circles.css'\n\nconst Circles = (props) => {\n    return (\n        <div className='Circles'>\n            <div className={`${props.circle1selected ? 'selected' : null}`}>1</div>\n            <div className={`${props.circle2selected ? 'selected' : null}`}>2</div>\n            <div className={`${props.circle3selected ? 'selected' : null}`}>3</div>\n            <div className={`${props.circle4selected ? 'selected' : null}`}>4</div>\n        </div>\n    );\n}\n\nexport default Circles;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './components/CircleSelector/CircleSelector';\nimport Circles from './components/Circles/Circles';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      circle1selected: null, \n      circle2selected: null, \n      circle3selected: null, \n      circle4selected: null \n    }\n  }\n\n  // Event Handlers\n\n  handleClickCircle1 = (e) => {\n    e.preventDefault();\n    this.setState({\n      circle1selected: true,\n      circle2selected: false,\n      circle3selected: false,\n      circle4selected: false\n    });\n  }\n  handleClickCircle2 = (e) => {\n    e.preventDefault();\n    this.setState({\n      circle1selected: false,\n      circle2selected: true,\n      circle3selected: false,\n      circle4selected: false\n    });\n  }\n  handleClickCircle3 = (e) => {\n    e.preventDefault();\n    this.setState({\n      circle1selected: false,\n      circle2selected: false,\n      circle3selected: true,\n      circle4selected: false\n    });\n  }\n  handleClickCircle4 = (e) => {\n    e.preventDefault();\n    this.setState({\n      circle1selected: false,\n      circle2selected: false,\n      circle3selected: false,\n      circle4selected: true\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">PROJECT 4 ASSESSMENT</header>\n        <main>\n          <CircleSelector\n            circle1selected={this.state.circle1selected}\n            circle2selected={this.state.circle2selected}\n            circle3selected={this.state.circle3selected}\n            circle4selected={this.state.circle4selected}\n            handleClickCircle1={this.handleClickCircle1}\n            handleClickCircle2={this.handleClickCircle2}\n            handleClickCircle3={this.handleClickCircle3}\n            handleClickCircle4={this.handleClickCircle4}\n          />\n          <Circles \n            circle1selected={this.state.circle1selected}\n            circle2selected={this.state.circle2selected}\n            circle3selected={this.state.circle3selected}\n            circle4selected={this.state.circle4selected}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}